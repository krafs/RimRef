name: Generate package

on:
# How often this script runs.
  schedule:
    - cron: '0 0,12 * * *'  # every day at midnight and noon (UTC)

# Allows manually triggering this script.
  workflow_dispatch:
    inputs:
      upload-to-nuget:
        description: 'Upload to NuGet.org'
        type: boolean

env:
  RIMWORLD_APP_ID: 294100
  # SteamCMD downloads RimWorld here by default.
  RIMWORLD_ROOT_DIR: 'C:\hostedtoolcache\windows\steamcmd\latest\i386\steamapps\common\RimWorld'

jobs:
  generate-package:
    name: Generate package
    strategy:
      # Ensures that only one branch is checked at a time.
      max-parallel: 1
      matrix:
        # We check the following beta branches on Steam for updates.
        branch: [public, unstable]

    runs-on: windows-latest
    steps:
    
      - name: Check out repository
        uses: actions/checkout@v3
          
      - name: Setup SteamCMD
        uses: CyberAndrii/setup-steamcmd@v1.1.5
        
      - name: Set up NuGet
        uses: NuGet/setup-nuget@v1.2.0
        with:
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}
        
      - name: Set up Refasmer
        run: dotnet tool install --global JetBrains.Refasmer.CliTool --version 1.0.33
      
      - name: Download Rimworld
        run: steamcmd +login ${{ secrets.STEAM_USERNAME }} ${{ secrets.STEAM_PASSWORD }} +app_update ${{ env.RIMWORLD_APP_ID }} -beta ${{ matrix.branch }} +quit

      - name: Generate reference assemblies
        run: refasmer -v --all -O ${{ github.workspace }}\package\ref\net472 $(Get-ChildItem -Name)
        working-directory: ${{ env.RIMWORLD_ROOT_DIR }}\RimWorldWin64_Data\Managed

      - name: Assemble NuGet package
        run: |
          $Version = $(cat ${{ env.RIMWORLD_ROOT_DIR }}\Version.txt).split()[0]
          $Version = If ("${{ matrix.branch }}" -eq "public") { $Version } Else { "$Version-beta" }
          $Year = Get-Date -Format "yyyy"
          nuget pack -Version $Version -Properties year=$Year -NoPackageAnalysis
        working-directory: ./package
        
        # Uploads the package as a GitHub artifact.
      - name: Upload GitHub artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          path: ./package/Krafs.Rimworld.Ref.*.nupkg
          retention-days: 7

        # Uploads the package to NuGet.org.
        # '-SkipDuplicate' means that the workflow won't be marked as failed if the version of the package already exists.
      - name: Upload to NuGet.org
        run: nuget push *.nupkg -Source https://api.nuget.org/v3/index.json -SkipDuplicate
        working-directory: ./package
        if: github.event_name == 'schedule' || github.event.inputs.upload-to-nuget == 'true'
